import numpy as np
from sentence_transformers import SentenceTransformer
from sklearn.metrics.pairwise import cosine_similarity
from sklearn.metrics import silhouette_score
from sklearn.cluster import KMeans
from concurrent.futures import ThreadPoolExecutor
import requests
from datetime import datetime


class ModelUtils:
    """
    工具类，提供直接获取文本的 embedding 方法。
    """
    _model_instance = None

    @classmethod
    def _load_model(cls, model_path="bert-base-chinese"):
        """
        加载 SentenceTransformer 模型。
        bert-base-chinese: 中文
        all-MiniLM-L6-v2
        paraphrase-multilingual-MiniLM-L12-v2: 跨语言
        """
        if cls._model_instance is None:
            cls._model_instance = SentenceTransformer(model_path)
            print("load model finish")
            print(datetime.now().strftime("%Y-%m-%d %H:%M:%S"))

    @classmethod
    def get_embedding(cls, text):
        """
        获取文本的 embedding，首先加载模型（如果未加载）。
        :param text: 输入的文本
        :return: 文本的 embedding
        """
        cls._load_model()
        if text is None:
            raise ValueError("Input text is None")
        return cls._model_instance.encode(text)


class LLMUtils:
    API_KEY = "204a3ea9bf39f18dd9bf32c71ecbb607.mITgz6pgV7Hzj27A"
    API_URL = "https://open.bigmodel.cn/api/paas/v4/chat/completions"
    MODEL = "GLM-4-Flash"

    @staticmethod
    def get_response(prompt, api_key=None, api_url=None, model=None):
        """
        调用 API 获取模型的回复
        :param prompt: 用户输入内容
        :param api_key: 可选，自定义 API Key
        :param api_url: 可选，自定义 API URL
        :param model: 可选，自定义模型
        :return: 模型返回的回复
        """
        headers = {
            "Content-Type": "application/json",
            "Authorization": f"Bearer {api_key or LLMUtils.API_KEY}"
        }
        request_body = {
            "model": model or LLMUtils.MODEL,
            "messages": [{"role": "user", "content": prompt}]
        }
        try:
            response = requests.post(api_url or LLMUtils.API_URL, headers=headers, json=request_body)
            response.raise_for_status()
            return response.json().get("choices", [{}])[0].get("message", {}).get("content",
                                                                                  "Error: Invalid response format")
        except requests.exceptions.RequestException as e:
            return f"Error occurred: {e}"

    @staticmethod
    def get_concept(nodes):
        """
        概括多个短语为一个短语
        :param nodes: 包含多个短语的列表
        :return: 概括后的短语
        """
        concept_name = ";".join([node.value for node in nodes])
        print(f"需要概括的短语: {concept_name}")
        prompt = f"你是一个概括大师，我将给你几个用‘;’分隔的中文短语，请你将它们概括成一个中文短语。注意仅需返回概括结果并将结果用大括号包裹。\n需要概括的中文短语是: {concept_name}"
        res = LLMUtils.get_response(prompt)
        std_res = LLMUtils.get_standard_response(res)
        if not std_res:
            std_res = LLMUtils.get_response(prompt)
        print(f"模型返回: {res}")
        return std_res

    @staticmethod
    def get_relation(value, candidate_name):
        """
        判断短语与候选短语之间的概念关系
        :param value: 待匹配的短语
        :param candidate_name: 候选短语，用分号分隔
        :return: 最密切相关的短语，或返回“无”
        """
        prompt = f"你是一个概念大师， 我将给你一个待匹配短语和若干用‘;’分隔的候选短语，请分析并确定是否有在概念上与待匹配的短语极度极度极度密切相关的目标短语。如果存在这样的短语，则返回该目标短语并将结果用大括号包裹；反之则返回“无”并用大括号包裹。\n待匹配的短语：{value}\n若干候选短语：{candidate_name}"
        res = LLMUtils.get_response(prompt)
        std_res = LLMUtils.get_standard_response(res)
        return std_res

    @staticmethod
    def get_standard_response(text):
        """
        解析返回结果中的标准格式 {xxx}
        :param text: 模型返回的文本
        :return: 提取的大括号中的内容
        """
        start = text.find('{')
        end = text.rfind('}')
        if start != -1 and end != -1 and start < end:
            res = text[start + 1:end]
            return res.replace('"', "")
        return None


class Node:
    def __init__(self, path='', value=None, children=None, embedding=None):
        self.path = path
        self.value = value
        self.children = children if children else {}
        self.embedding = embedding if embedding else []
        self.connection = ''

    def __repr__(self):
        return f"Node(path={self.path}, value={self.value}, children={len(self.children)}, embedding={self.embedding[:3]}...)"

    def insert_path(self, path):
        current_node = self
        for part in path:
            # 如果当前 part 不在 children 中，则新增
            if part not in current_node.children:
                new_node = Node(path=f"{current_node.path}.{part}" if current_node.path else part, value=part)
                # new_node.embedding = ModelUtils.get_embedding(new_node.value)
                current_node.children[part] = new_node

            # 更新 current_node 为子节点
            current_node = current_node.children[part]

    # def calculate_weighted_embedding1(self, x=0.7):
    #     """
    #     计算加权 embedding 并赋值。
    #     对于叶子节点，embedding 保持不变。
    #     对于非叶子节点，使用递归计算。
    #     :param x: 当前节点自身的权重系数，默认值为 0.5。
    #     """
    #     if not self.children:
    #         # 如果是叶子节点，直接返回自己的 embedding
    #         self.embedding = ModelUtils.get_embedding(self.value)
    #         return self.embedding
    #
    #     child_embeddings = [child.calculate_weighted_embedding1(x) for child in self.children.values()]
    #     avg_child_embedding = [sum(vec) / len(vec) for vec in zip(*child_embeddings)]
    #     self_value_embedding = ModelUtils.get_embedding(self.value)
    #     weighted_self_embedding = [dim * x for dim in self_value_embedding]
    #     weighted_child_embedding = [dim * (1 - x) for dim in avg_child_embedding]
    #     self.embedding = [sum(vec) for vec in zip(weighted_self_embedding, weighted_child_embedding)]
    #     return self.embedding

    def calculate_weighted_embedding(self, x=0.7, parent_value=None):
        # 如果该节点的 embedding 已经存在并非空数组，直接返回
        if self.embedding:
            return self.embedding

        # 叶子结点
        if not self.children:
            if parent_value:
                description = f"\"{parent_value}\"数据中的\"{self.value}\"属性"
            else:
                description = self.value
            self.embedding = ModelUtils.get_embedding(description)
            return self.embedding

        # 非叶子结点
        if parent_value:
            description = f"\"{parent_value}\"数据中的\"{self.value}\"数据"
        else:
            description = self.value

        # 递归计算子节点的 embedding
        child_embeddings = [child.calculate_weighted_embedding(x, self.value) for child in self.children.values()]
        avg_child_embedding = [sum(vec) / len(vec) for vec in zip(*child_embeddings)]

        # 当前节点的 embedding
        self_value_embedding = ModelUtils.get_embedding(description)
        weighted_self_embedding = [dim * x for dim in self_value_embedding]
        weighted_child_embedding = [dim * (1 - x) for dim in avg_child_embedding]

        # 加权合成 embedding
        self.embedding = [sum(vec) for vec in zip(weighted_self_embedding, weighted_child_embedding)]
        return self.embedding

    def process_node_connections(self):
        roots_value = [key for key in self.children.keys()]
        with ThreadPoolExecutor(max_workers=8) as executor:  # 限制线程数
            futures = []
            for child in self.children.values():
                roots_value_copy = roots_value.copy()
                roots_value_copy.remove(child.value)
                futures.append(executor.submit(child._get_root_connection, child, roots_value_copy))
            for future in futures:
                future.result()

    def _get_root_connection(self, node, roots_value):
        for child in node.children.values():
            child._get_node_connection(child, roots_value)

    def _get_node_connection(self, node, roots_value):
        if not node.children:
            return
        candidate_name = ";".join([v for v in roots_value])
        connection = LLMUtils.get_relation(node.value, candidate_name)
        print(f"{node.value} get connection: {connection}")
        if connection in roots_value:
            node.connection = connection
        else:
            for child in node.children.values():
                child._get_node_connection(child, roots_value)

    def print_tree(self, level=0):
        print(" " * level * 2 + f"{self.path}: {self.value} | Embedding: {self.embedding[:3]}...")
        for child in self.children.values():
            child.print_tree(level + 1)


class Aggregator:
    def __init__(self, threshold=0.8, n_clusters=8):
        self.threshold = threshold
        self.n_clusters = n_clusters

    def compute_similarity_matrix(self, nodes):
        embeddings = [node.embedding for node in nodes]
        similarity_matrix = cosine_similarity(embeddings)
        return similarity_matrix

    def calculate_silhouette_score(self, similarity_matrix, labels):
        """
        计算聚类的轮廓系数。
        """
        distance_matrix = 1 - similarity_matrix
        distance_matrix = (distance_matrix + distance_matrix.T) / 2
        np.fill_diagonal(distance_matrix, 0)
        distance_matrix = np.maximum(0, distance_matrix)
        try:
            silhouette_avg = silhouette_score(distance_matrix, labels, metric='precomputed')
            return silhouette_avg
        except ValueError:
            return -1.0

    def calculate_avg_similarity(self, nodes, labels):
        """
        计算聚类内的平均相似度。
        """
        avg_similarity = 0
        total_pairs = 0
        for label in np.unique(labels):  # 遍历每个簇
            indices = np.where(labels == label)[0]
            for i in range(len(indices)):
                for j in range(i + 1, len(indices)):
                    node_i = nodes[indices[i]]
                    node_j = nodes[indices[j]]
                    similarity = cosine_similarity([node_i.embedding], [node_j.embedding])[0][0]
                    avg_similarity += similarity
                    total_pairs += 1
        if total_pairs > 0:
            return avg_similarity / total_pairs
        return 0

    def calculate_cluster_separation(self, similarity_matrix, labels):
        cluster_separation = 0
        unique_labels = np.unique(labels)
        num_clusters = len(unique_labels)
        for i in range(num_clusters):
            for j in range(i + 1, num_clusters):
                cluster_i = np.where(labels == unique_labels[i])[0]
                cluster_j = np.where(labels == unique_labels[j])[0]
                # 类间的平均距离
                inter_cluster_distance = np.mean([1 - similarity_matrix[x][y] for x in cluster_i for y in cluster_j])
                cluster_separation += inter_cluster_distance
        return cluster_separation / (num_clusters * (num_clusters - 1) / 2 if num_clusters > 1 else 1)

    def find_optimal_clusters(self, similarity_matrix, max_clusters=5):
        """
        自动选择最优的聚类数，根据轮廓系数。
        返回最优聚类数、对应的 labels 和最大轮廓系数。
        """
        best_score = -1
        best_n_clusters = self.n_clusters
        best_labels = None

        for n_clusters in range(2, max_clusters + 1):
            kmeans = KMeans(n_clusters=n_clusters, random_state=0)
            kmeans.fit(similarity_matrix)
            labels = kmeans.labels_
            silhouette_avg = self.calculate_silhouette_score(similarity_matrix, labels)
            print(f"聚类数为：{n_clusters}  轮廓系数为：{silhouette_avg}")

            if silhouette_avg > best_score:
                best_score = silhouette_avg
                best_n_clusters = n_clusters
                best_labels = labels

        return best_n_clusters, best_labels, best_score

    # 聚类后的树更新逻辑
    def aggregate(self, root):
        root_nodes = list(root.children.values())
        similarity_matrix = self.compute_similarity_matrix(root_nodes)
        print(f"相似度矩阵为：{similarity_matrix}")
        print(f"原先森林数为: {len(root_nodes)}")

        optimal_n_clusters, labels, silhouette_avg = self.find_optimal_clusters(
            similarity_matrix=similarity_matrix,
            max_clusters=max(int(len(root_nodes) / 2), 2)
        )
        print(f"最优聚类数: {optimal_n_clusters}")
        print(f"轮廓系数: {silhouette_avg}")

        buckets = {}
        for idx, label in enumerate(labels):
            if label not in buckets:
                buckets[label] = []
            buckets[label].append(root_nodes[idx])

        node_components = list(buckets.values())
        print(f"分块结果：{[[node.value for node in component] for component in node_components]}")

        avg_similarity = self.calculate_avg_similarity(root_nodes, labels)
        cluster_separation = self.calculate_cluster_separation(similarity_matrix, labels)

        with ThreadPoolExecutor(max_workers=8) as executor:
            futures = [executor.submit(self._aggregate_component, component, root) for component in node_components]
            for future in futures:
                future.result()

        return root, silhouette_avg, avg_similarity, cluster_separation

    def _aggregate_component(self, nodes, root):
        if len(nodes) <= 1:
            return

        new_value = LLMUtils.get_concept(nodes)
        print("结点概括的结果为：")
        print(new_value)

        new_node = Node(path=new_value, value=new_value)
        # new_node.embedding = ModelUtils.get_embedding(new_node.value)

        # 从父节点中移除旧节点 & 为新节点添加旧节点作为子节点
        for node in nodes:
            root.children.pop(node.value, None)
            new_node.children[node.value] = node
            self._add_path(node, new_value)

        new_node.calculate_weighted_embedding()

        # 将新节点加入父节点
        root.children[new_value] = new_node

    def _add_path(self, node, value):
        node.path = f"{value}.{node.path}"
        for child in node.children:
            self._add_path(node.children[child], value)


class UDFKMeansMerge:
    def __init__(self):
        pass

    def transform(self, data, args, kvargs):
        # print(data)
        print("enter transform success")
        print(datetime.now().strftime("%Y-%m-%d %H:%M:%S"))

        root = Node(value='数据资产')
        paths = [row[1] for row in data[2:]]

        for path in paths:
            decoded_path = path.decode('utf-8')
            path_parts = decoded_path.split('.')
            root.insert_path(path_parts)
        print("finish insert path")
        print(datetime.now().strftime("%Y-%m-%d %H:%M:%S"))

        # root.calculate_weighted_embedding1(x=0.7)
        for child in root.children.values():
            child.calculate_weighted_embedding(x=0.8)
        print("finish calculate embedding")
        print(datetime.now().strftime("%Y-%m-%d %H:%M:%S"))
        # root.print_tree()

        aggregator = Aggregator()
        root, silhouette_avg, avg_similarity, cluster_separation = aggregator.aggregate(root)
        print("finish aggregate")
        print(datetime.now().strftime("%Y-%m-%d %H:%M:%S"))
        print(f"silhouette_avg为: {silhouette_avg}\navg_similarity为: {avg_similarity}\ncluster_separation为: {cluster_separation}")

        # root.process_node_connections()
        # print("finish get connection")
        # print(datetime.now().strftime("%Y-%m-%d %H:%M:%S"))

        result = self.generate_result(root)
        print("finish generate result")
        print(datetime.now().strftime("%Y-%m-%d %H:%M:%S"))

        return result

    def generate_result(self, root):
        result = [['(path)', '(value)', '(parent)', '(depth)', '(embedding)'], ['BINARY', 'BINARY', 'BINARY', 'LONG', 'BINARY']]
        # for child in root.children.values():
        #     self.traverse_tree(child, result, 1)
        self.traverse_tree(root, "undefined", result, 0)
        return result

    def traverse_tree(self, node, parent_id, result, depth):
        embedding_str = ','.join(f"{x:.3f}" for x in node.embedding)
        result.append([node.path.encode('utf-8'), node.value.encode('utf-8'), parent_id, depth, embedding_str.encode('utf-8')])
        for child in node.children.values():
            self.traverse_tree(child, node.path, result, depth + 1)


# # 测试数据
# data = [['key', 'path', 'type'], ['LONG', 'BINARY', 'BINARY'], [-1, b'\xe4\xb8\x9c\xe6\xb5\xb7\xe4\xbf\xa1\xe6\x81\xaf\xe4\xb8\xad\xe5\xbf\x83.\xe7\x81\xbe\xe6\x83\x85\xe6\x95\xb0\xe6\x8d\xae.\xe5\x9c\xb0\xe7\x82\xb9', b'LONG'], [-1, b'\xe4\xb8\x9c\xe6\xb5\xb7\xe4\xbf\xa1\xe6\x81\xaf\xe4\xb8\xad\xe5\xbf\x83.\xe7\x81\xbe\xe6\x83\x85\xe6\x95\xb0\xe6\x8d\xae.\xe5\xbc\xba\xe5\xba\xa6', b'LONG'], [-1, b'\xe4\xb8\x9c\xe6\xb5\xb7\xe4\xbf\xa1\xe6\x81\xaf\xe4\xb8\xad\xe5\xbf\x83.\xe7\x81\xbe\xe6\x83\x85\xe6\x95\xb0\xe6\x8d\xae.\xe6\x8d\x9f\xe5\xa4\xb1', b'LONG'], [-1, b'\xe4\xb8\x9c\xe6\xb5\xb7\xe4\xbf\xa1\xe6\x81\xaf\xe4\xb8\xad\xe5\xbf\x83.\xe7\x9f\xa2\xe9\x87\x8f\xe6\x95\xb0\xe6\x8d\xae.\xe5\x80\xbe\xe5\x80\x92\xe5\x8c\xba\xe4\xbd\x8d\xe7\xbd\xae', b'LONG'], [-1, b'\xe4\xb8\x9c\xe6\xb5\xb7\xe4\xbf\xa1\xe6\x81\xaf\xe4\xb8\xad\xe5\xbf\x83.\xe7\x9f\xa2\xe9\x87\x8f\xe6\x95\xb0\xe6\x8d\xae.\xe5\x80\xbe\xe5\x80\x92\xe5\x8c\xba\xe8\x8c\x83\xe5\x9b\xb4', b'LONG'], [-1, b'\xe4\xb8\x9c\xe6\xb5\xb7\xe4\xbf\xa1\xe6\x81\xaf\xe4\xb8\xad\xe5\xbf\x83.\xe7\x9f\xa2\xe9\x87\x8f\xe6\x95\xb0\xe6\x8d\xae.\xe6\xb5\xb7\xe5\xba\x95\xe7\xae\xa1\xe7\xba\xbf\xe6\xb7\xb1\xe5\xba\xa6', b'LONG'], [-1, b'\xe4\xb8\x9c\xe6\xb5\xb7\xe4\xbf\xa1\xe6\x81\xaf\xe4\xb8\xad\xe5\xbf\x83.\xe7\x9f\xa2\xe9\x87\x8f\xe6\x95\xb0\xe6\x8d\xae.\xe6\xb5\xb7\xe5\xba\x95\xe7\xae\xa1\xe7\xba\xbf\xe9\x95\xbf\xe5\xba\xa6', b'LONG'], [-1, b'\xe4\xb8\x9c\xe6\xb5\xb7\xe4\xbf\xa1\xe6\x81\xaf\xe4\xb8\xad\xe5\xbf\x83.\xe9\x81\xa5\xe6\x84\x9f\xe6\x95\xb0\xe6\x8d\xae.\xe6\xb5\xb7\xe5\x86\xb0\xe8\xa6\x86\xe7\x9b\x96', b'LONG'], [-1, b'\xe4\xb8\x9c\xe6\xb5\xb7\xe4\xbf\xa1\xe6\x81\xaf\xe4\xb8\xad\xe5\xbf\x83.\xe9\x81\xa5\xe6\x84\x9f\xe6\x95\xb0\xe6\x8d\xae.\xe6\xb5\xb7\xe6\xb4\x8b\xe9\xa2\x9c\xe8\x89\xb2', b'LONG'], [-1, b'\xe4\xb8\x9c\xe6\xb5\xb7\xe4\xbf\xa1\xe6\x81\xaf\xe4\xb8\xad\xe5\xbf\x83.\xe9\x81\xa5\xe6\x84\x9f\xe6\x95\xb0\xe6\x8d\xae.\xe6\xb8\xa9\xe5\xba\xa6', b'LONG'], [-1, b'\xe4\xb8\xad\xe5\x9b\xbd\xe8\xbf\x91\xe6\xb5\xb7\xe7\x8e\xaf\xe5\xa2\x83\xe9\x81\xa5\xe6\x84\x9f\xe4\xba\xa7\xe5\x93\x81\xe6\x95\xb0\xe6\x8d\xae.\xe6\xb0\x94\xe6\xba\xb6\xe8\x83\xb6\xe5\x85\x89\xe5\xad\xa6\xe5\x8e\x9a\xe5\xba\xa6', b'LONG'], [-1, b'\xe4\xb8\xad\xe5\x9b\xbd\xe8\xbf\x91\xe6\xb5\xb7\xe7\x8e\xaf\xe5\xa2\x83\xe9\x81\xa5\xe6\x84\x9f\xe4\xba\xa7\xe5\x93\x81\xe6\x95\xb0\xe6\x8d\xae.\xe6\xb0\xb4\xe4\xbd\x93\xe6\xbc\xab\xe5\x8f\x8d\xe5\xb0\x84', b'LONG'], [-1, b'\xe4\xb8\xad\xe5\x9b\xbd\xe8\xbf\x91\xe6\xb5\xb7\xe7\x8e\xaf\xe5\xa2\x83\xe9\x81\xa5\xe6\x84\x9f\xe4\xba\xa7\xe5\x93\x81\xe6\x95\xb0\xe6\x8d\xae.\xe6\xb5\xb7\xe6\xb0\xb4\xe9\x80\x8f\xe6\x98\x8e\xe5\xba\xa6', b'LONG'], [-1, b'\xe4\xb8\xad\xe5\x9b\xbd\xe8\xbf\x91\xe6\xb5\xb7\xe7\x8e\xaf\xe5\xa2\x83\xe9\x81\xa5\xe6\x84\x9f\xe4\xba\xa7\xe5\x93\x81\xe6\x95\xb0\xe6\x8d\xae.\xe6\xb5\xb7\xe8\xa1\xa8\xe6\xb8\xa9\xe5\xba\xa6', b'LONG'], [-1, b'\xe5\x86\x8d\xe5\x88\x86\xe6\x9e\x90\xe6\x95\xb0\xe6\x8d\xae.\xe4\xb8\x9c\xe5\x8d\x97\xe5\x8d\xb0\xe5\xba\xa6\xe6\xb4\x8bROMS\xe6\xa8\xa1\xe6\x8b\x9f\xe6\x95\xb0\xe6\x8d\xae\xe9\x9b\x86.\xe6\xb5\xb7\xe5\xb9\xb3\xe9\x9d\xa2\xe9\xab\x98\xe5\xba\xa6', b'LONG'], [-1, b'\xe5\x86\x8d\xe5\x88\x86\xe6\x9e\x90\xe6\x95\xb0\xe6\x8d\xae.\xe4\xb8\x9c\xe5\x8d\x97\xe5\x8d\xb0\xe5\xba\xa6\xe6\xb4\x8bROMS\xe6\xa8\xa1\xe6\x8b\x9f\xe6\x95\xb0\xe6\x8d\xae\xe9\x9b\x86.\xe6\xb5\xb7\xe6\xb5\x81', b'LONG'], [-1, b'\xe5\x86\x8d\xe5\x88\x86\xe6\x9e\x90\xe6\x95\xb0\xe6\x8d\xae.\xe4\xb8\x9c\xe5\x8d\x97\xe5\x8d\xb0\xe5\xba\xa6\xe6\xb4\x8bROMS\xe6\xa8\xa1\xe6\x8b\x9f\xe6\x95\xb0\xe6\x8d\xae\xe9\x9b\x86.\xe6\xb8\xa9\xe5\xba\xa6', b'LONG'], [-1, b'\xe5\x86\x8d\xe5\x88\x86\xe6\x9e\x90\xe6\x95\xb0\xe6\x8d\xae.\xe4\xb8\x9c\xe5\x8d\x97\xe5\x8d\xb0\xe5\xba\xa6\xe6\xb4\x8bROMS\xe6\xa8\xa1\xe6\x8b\x9f\xe6\x95\xb0\xe6\x8d\xae\xe9\x9b\x86.\xe7\x9b\x90\xe5\xba\xa6', b'LONG'], [-1, b'\xe5\x86\x8d\xe5\x88\x86\xe6\x9e\x90\xe6\x95\xb0\xe6\x8d\xae.\xe5\x85\xa8\xe7\x90\x83\xe6\xb5\xb7\xe6\xb4\x8b\xe5\xb1\x82\xe7\xbb\x93\xe6\xa0\xbc\xe7\x82\xb9\xe6\x95\xb0\xe6\x8d\xae\xe9\x9b\x86.\xe5\xaf\x86\xe5\xba\xa6', b'LONG'], [-1, b'\xe5\x86\x8d\xe5\x88\x86\xe6\x9e\x90\xe6\x95\xb0\xe6\x8d\xae.\xe5\x85\xa8\xe7\x90\x83\xe6\xb5\xb7\xe6\xb4\x8b\xe5\xb1\x82\xe7\xbb\x93\xe6\xa0\xbc\xe7\x82\xb9\xe6\x95\xb0\xe6\x8d\xae\xe9\x9b\x86.\xe6\xb5\xae\xe5\x8a\x9b\xe9\xa2\x91\xe7\x8e\x87', b'LONG'], [-1, b'\xe5\x86\x8d\xe5\x88\x86\xe6\x9e\x90\xe6\x95\xb0\xe6\x8d\xae.\xe5\x85\xa8\xe7\x90\x83\xe6\xb5\xb7\xe6\xb4\x8b\xe6\xa0\xbc\xe7\x82\xb9\xe6\x95\xb0\xe6\x8d\xae\xe9\x9b\x86.\xe6\xb5\xb7\xe6\xb0\x94\xe9\x80\x9a\xe9\x87\x8f', b'LONG'], [-1, b'\xe5\x86\x8d\xe5\x88\x86\xe6\x9e\x90\xe6\x95\xb0\xe6\x8d\xae.\xe5\x85\xa8\xe7\x90\x83\xe6\xb5\xb7\xe6\xb4\x8b\xe6\xa0\xbc\xe7\x82\xb9\xe6\x95\xb0\xe6\x8d\xae\xe9\x9b\x86.\xe6\xb5\xb7\xe6\xb5\x81', b'LONG'], [-1, b'\xe5\x86\x8d\xe5\x88\x86\xe6\x9e\x90\xe6\x95\xb0\xe6\x8d\xae.\xe5\x85\xa8\xe7\x90\x83\xe6\xb5\xb7\xe6\xb4\x8b\xe6\xa0\xbc\xe7\x82\xb9\xe6\x95\xb0\xe6\x8d\xae\xe9\x9b\x86.\xe6\xb8\xa9\xe5\xba\xa6', b'LONG'], [-1, b'\xe5\x86\x8d\xe5\x88\x86\xe6\x9e\x90\xe6\x95\xb0\xe6\x8d\xae.\xe5\x85\xa8\xe7\x90\x83\xe6\xb5\xb7\xe6\xb4\x8b\xe6\xa0\xbc\xe7\x82\xb9\xe6\x95\xb0\xe6\x8d\xae\xe9\x9b\x86.\xe7\x83\xad\xe5\x90\xab\xe9\x87\x8f', b'LONG'], [-1, b'\xe5\x86\x8d\xe5\x88\x86\xe6\x9e\x90\xe6\x95\xb0\xe6\x8d\xae.\xe5\x85\xa8\xe7\x90\x83\xe6\xb5\xb7\xe6\xb4\x8b\xe6\xa0\xbc\xe7\x82\xb9\xe6\x95\xb0\xe6\x8d\xae\xe9\x9b\x86.\xe7\x9b\x90\xe5\xba\xa6', b'LONG'], [-1, b'\xe5\x8c\x97\xe5\x86\xb0\xe6\xb4\x8b\xe5\x8d\xab\xe6\x98\x9f\xe9\x81\xa5\xe6\x84\x9f\xe4\xba\xa7\xe5\x93\x81\xe6\x95\xb0\xe6\x8d\xae.\xe6\xb5\xb7\xe5\x86\xb0\xe5\xaf\x86\xe9\x9b\x86\xe5\xba\xa6', b'LONG'], [-1, b'\xe5\x8c\x97\xe5\x86\xb0\xe6\xb4\x8b\xe5\x8d\xab\xe6\x98\x9f\xe9\x81\xa5\xe6\x84\x9f\xe4\xba\xa7\xe5\x93\x81\xe6\x95\xb0\xe6\x8d\xae.\xe6\xb5\xb7\xe6\xb0\xb4\xe9\x80\x8f\xe6\x98\x8e\xe5\xba\xa6', b'LONG'], [-1, b'\xe5\x8c\x97\xe5\x86\xb0\xe6\xb4\x8b\xe5\x8d\xab\xe6\x98\x9f\xe9\x81\xa5\xe6\x84\x9f\xe4\xba\xa7\xe5\x93\x81\xe6\x95\xb0\xe6\x8d\xae.\xe6\xb5\xb7\xe9\x9d\xa2\xe6\xb8\xa9\xe5\xba\xa6', b'LONG'], [-1, b'\xe5\x8c\x97\xe5\x86\xb0\xe6\xb4\x8b\xe5\x8d\xab\xe6\x98\x9f\xe9\x81\xa5\xe6\x84\x9f\xe4\xba\xa7\xe5\x93\x81\xe6\x95\xb0\xe6\x8d\xae.\xe6\xb5\xb7\xe9\x9d\xa2\xe9\xa3\x8e\xe5\x9c\xba', b'LONG'], [-1, b'\xe5\x8c\x97\xe6\xb5\xb7\xe4\xbf\xa1\xe6\x81\xaf\xe4\xb8\xad\xe5\xbf\x83.\xe5\x8c\x97\xe6\xb5\xb7\xe6\xb5\xb7\xe6\xb4\x8b\xe8\xa7\x82\xe6\xb5\x8b\xe8\xb5\x84\xe6\x96\x99_\xe5\xbf\x97\xe6\x84\xbf\xe8\x88\xb9.\xe6\xb5\x81\xe9\x80\x9f', b'LONG'], [-1, b'\xe5\x8c\x97\xe6\xb5\xb7\xe4\xbf\xa1\xe6\x81\xaf\xe4\xb8\xad\xe5\xbf\x83.\xe5\x8c\x97\xe6\xb5\xb7\xe6\xb5\xb7\xe6\xb4\x8b\xe8\xa7\x82\xe6\xb5\x8b\xe8\xb5\x84\xe6\x96\x99_\xe5\xbf\x97\xe6\x84\xbf\xe8\x88\xb9.\xe6\xb8\xa9\xe5\xba\xa6', b'LONG'], [-1, b'\xe5\x8c\x97\xe6\xb5\xb7\xe4\xbf\xa1\xe6\x81\xaf\xe4\xb8\xad\xe5\xbf\x83.\xe5\x8c\x97\xe6\xb5\xb7\xe6\xb5\xb7\xe6\xb4\x8b\xe8\xa7\x82\xe6\xb5\x8b\xe8\xb5\x84\xe6\x96\x99_\xe5\xbf\x97\xe6\x84\xbf\xe8\x88\xb9.\xe7\x9b\x90\xe5\xba\xa6', b'LONG'], [-1, b'\xe5\x8c\x97\xe6\xb5\xb7\xe4\xbf\xa1\xe6\x81\xaf\xe4\xb8\xad\xe5\xbf\x83.\xe5\x8c\x97\xe6\xb5\xb7\xe6\xb5\xb7\xe6\xb4\x8b\xe8\xa7\x82\xe6\xb5\x8b\xe8\xb5\x84\xe6\x96\x99_\xe6\xb5\xae\xe6\xa0\x87.\xe6\xb5\x81\xe9\x80\x9f', b'LONG'], [-1, b'\xe5\x8c\x97\xe6\xb5\xb7\xe4\xbf\xa1\xe6\x81\xaf\xe4\xb8\xad\xe5\xbf\x83.\xe5\x8c\x97\xe6\xb5\xb7\xe6\xb5\xb7\xe6\xb4\x8b\xe8\xa7\x82\xe6\xb5\x8b\xe8\xb5\x84\xe6\x96\x99_\xe6\xb5\xae\xe6\xa0\x87.\xe6\xb8\xa9\xe5\xba\xa6', b'LONG'], [-1, b'\xe5\x8c\x97\xe6\xb5\xb7\xe4\xbf\xa1\xe6\x81\xaf\xe4\xb8\xad\xe5\xbf\x83.\xe5\x8c\x97\xe6\xb5\xb7\xe6\xb5\xb7\xe6\xb4\x8b\xe8\xa7\x82\xe6\xb5\x8b\xe8\xb5\x84\xe6\x96\x99_\xe6\xb5\xae\xe6\xa0\x87.\xe7\x9b\x90\xe5\xba\xa6', b'LONG'], [-1, b'\xe5\x8c\x97\xe6\xb5\xb7\xe4\xbf\xa1\xe6\x81\xaf\xe4\xb8\xad\xe5\xbf\x83.\xe6\xb5\xb7\xe6\xb4\x8b\xe7\xab\x99\xe6\xb0\xb4\xe5\x87\x86\xe8\x81\x94\xe6\xb5\x8b\xe8\xb5\x84\xe6\x96\x99.\xe6\xb0\xb4\xe4\xbd\x8d', b'LONG'], [-1, b'\xe5\x8c\x97\xe6\xb5\xb7\xe4\xbf\xa1\xe6\x81\xaf\xe4\xb8\xad\xe5\xbf\x83.\xe6\xb5\xb7\xe6\xb4\x8b\xe7\xab\x99\xe6\xb0\xb4\xe5\x87\x86\xe8\x81\x94\xe6\xb5\x8b\xe8\xb5\x84\xe6\x96\x99.\xe6\xb5\xb7\xe5\xb9\xb3\xe9\x9d\xa2', b'LONG'], [-1, b'\xe5\x8c\x97\xe6\xb5\xb7\xe4\xbf\xa1\xe6\x81\xaf\xe4\xb8\xad\xe5\xbf\x83.\xe6\xb5\xb7\xe6\xb4\x8b\xe7\xab\x99\xe6\xb0\xb4\xe5\x87\x86\xe8\x81\x94\xe6\xb5\x8b\xe8\xb5\x84\xe6\x96\x99.\xe6\xbd\xae\xe6\xb1\x90', b'LONG'], [-1, b'\xe5\x8c\x97\xe6\xb5\xb7\xe4\xbf\xa1\xe6\x81\xaf\xe4\xb8\xad\xe5\xbf\x83.\xe6\xb5\xb7\xe6\xb4\x8b\xe7\xab\x99\xe6\xb0\xb4\xe5\x87\x86\xe8\x81\x94\xe6\xb5\x8b\xe8\xb5\x84\xe6\x96\x99.\xe7\xab\x99\xe7\x82\xb9', b'LONG'], [-1, b'\xe5\x9b\xbd\xe5\xae\xb6\xe5\x8d\xab\xe6\x98\x9f\xe6\xb5\xb7\xe6\xb4\x8b\xe5\xba\x94\xe7\x94\xa8\xe4\xb8\xad\xe5\xbf\x83.\xe6\xb5\xb7\xe6\xb4\x8b\xe9\x81\xa5\xe6\x84\x9f\xe6\x9e\x81\xe5\x9c\xb0\xe6\xb5\xb7\xe5\x86\xb0\xe5\xba\x94\xe7\x94\xa8\xe7\x9b\x91\xe6\xb5\x8b\xe4\xba\xa7\xe5\x93\x81.\xe5\x8e\x9a\xe5\xba\xa6', b'LONG'], [-1, b'\xe5\x9b\xbd\xe5\xae\xb6\xe5\x8d\xab\xe6\x98\x9f\xe6\xb5\xb7\xe6\xb4\x8b\xe5\xba\x94\xe7\x94\xa8\xe4\xb8\xad\xe5\xbf\x83.\xe6\xb5\xb7\xe6\xb4\x8b\xe9\x81\xa5\xe6\x84\x9f\xe6\x9e\x81\xe5\x9c\xb0\xe6\xb5\xb7\xe5\x86\xb0\xe5\xba\x94\xe7\x94\xa8\xe7\x9b\x91\xe6\xb5\x8b\xe4\xba\xa7\xe5\x93\x81.\xe5\xad\xa3\xe8\x8a\x82\xe6\x80\xa7\xe5\x8f\x98\xe5\x8c\x96', b'LONG'], [-1, b'\xe5\x9b\xbd\xe5\xae\xb6\xe5\x8d\xab\xe6\x98\x9f\xe6\xb5\xb7\xe6\xb4\x8b\xe5\xba\x94\xe7\x94\xa8\xe4\xb8\xad\xe5\xbf\x83.\xe6\xb5\xb7\xe6\xb4\x8b\xe9\x81\xa5\xe6\x84\x9f\xe6\x9e\x81\xe5\x9c\xb0\xe6\xb5\xb7\xe5\x86\xb0\xe5\xba\x94\xe7\x94\xa8\xe7\x9b\x91\xe6\xb5\x8b\xe4\xba\xa7\xe5\x93\x81.\xe6\xb8\xa9\xe5\xba\xa6', b'LONG'], [-1, b'\xe5\x9b\xbd\xe5\xae\xb6\xe5\x8d\xab\xe6\x98\x9f\xe6\xb5\xb7\xe6\xb4\x8b\xe5\xba\x94\xe7\x94\xa8\xe4\xb8\xad\xe5\xbf\x83.\xe6\xb5\xb7\xe6\xb4\x8b\xe9\x81\xa5\xe6\x84\x9f\xe6\x9e\x81\xe5\x9c\xb0\xe6\xb5\xb7\xe5\x86\xb0\xe5\xba\x94\xe7\x94\xa8\xe7\x9b\x91\xe6\xb5\x8b\xe4\xba\xa7\xe5\x93\x81.\xe7\xa7\xbb\xe5\x8a\xa8\xe8\xb6\x8b\xe5\x8a\xbf', b'LONG'], [-1, b'\xe5\x9b\xbd\xe5\xae\xb6\xe5\x8d\xab\xe6\x98\x9f\xe6\xb5\xb7\xe6\xb4\x8b\xe5\xba\x94\xe7\x94\xa8\xe4\xb8\xad\xe5\xbf\x83.\xe6\xb5\xb7\xe6\xb4\x8b\xe9\x81\xa5\xe6\x84\x9f\xe6\xb5\xb7\xe5\x86\xb0\xe5\xba\x94\xe7\x94\xa8\xe7\x9b\x91\xe6\xb5\x8b\xe4\xba\xa7\xe5\x93\x81.\xe5\x8e\x9a\xe5\xba\xa6', b'LONG'], [-1, b'\xe5\x9b\xbd\xe5\xae\xb6\xe5\x8d\xab\xe6\x98\x9f\xe6\xb5\xb7\xe6\xb4\x8b\xe5\xba\x94\xe7\x94\xa8\xe4\xb8\xad\xe5\xbf\x83.\xe6\xb5\xb7\xe6\xb4\x8b\xe9\x81\xa5\xe6\x84\x9f\xe6\xb5\xb7\xe5\x86\xb0\xe5\xba\x94\xe7\x94\xa8\xe7\x9b\x91\xe6\xb5\x8b\xe4\xba\xa7\xe5\x93\x81.\xe7\xa7\xbb\xe5\x8a\xa8\xe8\xb6\x8b\xe5\x8a\xbf', b'LONG'], [-1, b'\xe5\x9b\xbd\xe5\xae\xb6\xe5\x8d\xab\xe6\x98\x9f\xe6\xb5\xb7\xe6\xb4\x8b\xe5\xba\x94\xe7\x94\xa8\xe4\xb8\xad\xe5\xbf\x83.\xe6\xb5\xb7\xe6\xb4\x8b\xe9\x81\xa5\xe6\x84\x9f\xe6\xb5\xb7\xe5\x86\xb0\xe5\xba\x94\xe7\x94\xa8\xe7\x9b\x91\xe6\xb5\x8b\xe4\xba\xa7\xe5\x93\x81.\xe8\x8c\x83\xe5\x9b\xb4', b'LONG'], [-1, b'\xe5\x9b\xbd\xe5\xae\xb6\xe5\x8d\xab\xe6\x98\x9f\xe6\xb5\xb7\xe6\xb4\x8b\xe5\xba\x94\xe7\x94\xa8\xe4\xb8\xad\xe5\xbf\x83.\xe6\xb5\xb7\xe6\xb4\x8b\xe9\x81\xa5\xe6\x84\x9f\xe7\xbb\xbf\xe6\xbd\xae\xe5\xba\x94\xe7\x94\xa8\xe7\x9b\x91\xe6\xb5\x8b\xe4\xba\xa7\xe5\x93\x81.\xe5\x88\x86\xe5\xb8\x83\xe5\x8c\xba\xe5\x9f\x9f', b'LONG'], [-1, b'\xe5\x9b\xbd\xe5\xae\xb6\xe5\x8d\xab\xe6\x98\x9f\xe6\xb5\xb7\xe6\xb4\x8b\xe5\xba\x94\xe7\x94\xa8\xe4\xb8\xad\xe5\xbf\x83.\xe6\xb5\xb7\xe6\xb4\x8b\xe9\x81\xa5\xe6\x84\x9f\xe7\xbb\xbf\xe6\xbd\xae\xe5\xba\x94\xe7\x94\xa8\xe7\x9b\x91\xe6\xb5\x8b\xe4\xba\xa7\xe5\x93\x81.\xe7\x94\x9f\xe7\x89\xa9\xe9\x87\x8f', b'LONG'], [-1, b'\xe5\x9b\xbd\xe5\xae\xb6\xe5\x8d\xab\xe6\x98\x9f\xe6\xb5\xb7\xe6\xb4\x8b\xe5\xba\x94\xe7\x94\xa8\xe4\xb8\xad\xe5\xbf\x83.\xe6\xb5\xb7\xe6\xb4\x8b\xe9\x81\xa5\xe6\x84\x9f\xe7\xbb\xbf\xe6\xbd\xae\xe5\xba\x94\xe7\x94\xa8\xe7\x9b\x91\xe6\xb5\x8b\xe4\xba\xa7\xe5\x93\x81.\xe8\xa6\x86\xe7\x9b\x96\xe9\x9d\xa2\xe7\xa7\xaf', b'LONG'], [-1, b'\xe5\x9b\xbd\xe5\xae\xb6\xe6\xb7\xb1\xe6\xb5\xb7\xe5\x9f\xba\xe5\x9c\xb0\xe7\xae\xa1\xe7\x90\x86\xe4\xb8\xad\xe5\xbf\x83.\xe5\x9c\xb0\xe9\x9d\xa2\xe6\xb0\x94\xe8\xb1\xa1\xe8\xa7\x82\xe6\xb5\x8b\xe6\x95\xb0\xe6\x8d\xae.\xe5\x9c\xb0\xe7\x82\xb9', b'LONG'], [-1, b'\xe5\x9b\xbd\xe5\xae\xb6\xe6\xb7\xb1\xe6\xb5\xb7\xe5\x9f\xba\xe5\x9c\xb0\xe7\xae\xa1\xe7\x90\x86\xe4\xb8\xad\xe5\xbf\x83.\xe5\x9c\xb0\xe9\x9d\xa2\xe6\xb0\x94\xe8\xb1\xa1\xe8\xa7\x82\xe6\xb5\x8b\xe6\x95\xb0\xe6\x8d\xae.\xe6\xb8\xa9\xe5\xba\xa6', b'LONG'], [-1, b'\xe5\x9b\xbd\xe5\xae\xb6\xe6\xb7\xb1\xe6\xb5\xb7\xe5\x9f\xba\xe5\x9c\xb0\xe7\xae\xa1\xe7\x90\x86\xe4\xb8\xad\xe5\xbf\x83.\xe5\x9c\xb0\xe9\x9d\xa2\xe6\xb0\x94\xe8\xb1\xa1\xe8\xa7\x82\xe6\xb5\x8b\xe6\x95\xb0\xe6\x8d\xae.\xe6\xb9\xbf\xe5\xba\xa6', b'LONG'], [-1, b'\xe5\x9b\xbd\xe5\xae\xb6\xe6\xb7\xb1\xe6\xb5\xb7\xe5\x9f\xba\xe5\x9c\xb0\xe7\xae\xa1\xe7\x90\x86\xe4\xb8\xad\xe5\xbf\x83.\xe5\x9c\xb0\xe9\x9d\xa2\xe6\xb0\x94\xe8\xb1\xa1\xe8\xa7\x82\xe6\xb5\x8b\xe6\x95\xb0\xe6\x8d\xae.\xe7\x9b\x90\xe5\xba\xa6', b'LONG'], [-1, b'\xe5\x9b\xbd\xe5\xae\xb6\xe6\xb7\xb1\xe6\xb5\xb7\xe5\x9f\xba\xe5\x9c\xb0\xe7\xae\xa1\xe7\x90\x86\xe4\xb8\xad\xe5\xbf\x83.\xe5\x9c\xb0\xe9\x9d\xa2\xe6\xb0\x94\xe8\xb1\xa1\xe8\xa7\x82\xe6\xb5\x8b\xe6\x95\xb0\xe6\x8d\xae.\xe9\xa3\x8e\xe5\x90\x91', b'LONG'], [-1, b'\xe5\x9b\xbd\xe5\xae\xb6\xe6\xb7\xb1\xe6\xb5\xb7\xe5\x9f\xba\xe5\x9c\xb0\xe7\xae\xa1\xe7\x90\x86\xe4\xb8\xad\xe5\xbf\x83.\xe5\x9c\xb0\xe9\x9d\xa2\xe6\xb0\x94\xe8\xb1\xa1\xe8\xa7\x82\xe6\xb5\x8b\xe6\x95\xb0\xe6\x8d\xae.\xe9\xa3\x8e\xe9\x80\x9f', b'LONG'], [-1, b'\xe5\x9b\xbd\xe5\xae\xb6\xe6\xb7\xb1\xe6\xb5\xb7\xe5\x9f\xba\xe5\x9c\xb0\xe7\xae\xa1\xe7\x90\x86\xe4\xb8\xad\xe5\xbf\x83.\xe9\xb3\x8c\xe5\xb1\xb1\xe7\xab\x99\xe6\xbd\xae\xe6\xb1\x90\xe6\x95\xb0\xe6\x8d\xae.\xe5\x8f\x98\xe5\x8c\x96\xe8\xb6\x8b\xe5\x8a\xbf', b'LONG'], [-1, b'\xe5\x9b\xbd\xe5\xae\xb6\xe6\xb7\xb1\xe6\xb5\xb7\xe5\x9f\xba\xe5\x9c\xb0\xe7\xae\xa1\xe7\x90\x86\xe4\xb8\xad\xe5\xbf\x83.\xe9\xb3\x8c\xe5\xb1\xb1\xe7\xab\x99\xe6\xbd\xae\xe6\xb1\x90\xe6\x95\xb0\xe6\x8d\xae.\xe6\xbd\xae\xe4\xbd\x8d\xe9\xab\x98\xe5\xba\xa6', b'LONG'], [-1, b'\xe5\xae\x9e\xe5\x86\xb5\xe5\x88\x86\xe6\x9e\x90\xe6\x95\xb0\xe6\x8d\xae.\xe5\x9c\xb0\xe8\xbd\xac\xe6\xb5\x81', b'LONG'], [-1, b'\xe5\xae\x9e\xe5\x86\xb5\xe5\x88\x86\xe6\x9e\x90\xe6\x95\xb0\xe6\x8d\xae.\xe5\xa3\xb0\xe9\x80\x9f', b'LONG'], [-1, b'\xe5\xae\x9e\xe5\x86\xb5\xe5\x88\x86\xe6\x9e\x90\xe6\x95\xb0\xe6\x8d\xae.\xe5\xaf\x86\xe5\xba\xa6', b'LONG'], [-1, b'\xe5\xae\x9e\xe5\x86\xb5\xe5\x88\x86\xe6\x9e\x90\xe6\x95\xb0\xe6\x8d\xae.\xe6\xb8\xa9\xe5\xba\xa6', b'LONG'], [-1, b'\xe5\xae\x9e\xe5\x86\xb5\xe5\x88\x86\xe6\x9e\x90\xe6\x95\xb0\xe6\x8d\xae.\xe7\x9b\x90\xe5\xba\xa6', b'LONG'], [-1, b'\xe5\xbd\xb1\xe5\x83\x8f\xe9\x81\xa5\xe6\x84\x9f.\xe4\xb8\xad\xe5\x9b\xbd\xe8\xbf\x91\xe6\xb5\xb7HY1C-CZI\xe5\xbd\xb1\xe5\x83\x8f\xe6\x95\xb0\xe6\x8d\xae.\xe5\x88\x86\xe8\xbe\xa8\xe7\x8e\x87', b'LONG'], [-1, b'\xe5\xbd\xb1\xe5\x83\x8f\xe9\x81\xa5\xe6\x84\x9f.\xe4\xb8\xad\xe5\x9b\xbd\xe8\xbf\x91\xe6\xb5\xb7HY1C-CZI\xe5\xbd\xb1\xe5\x83\x8f\xe6\x95\xb0\xe6\x8d\xae.\xe5\xbd\xb1\xe5\x83\x8f\xe7\xb1\xbb\xe5\x9e\x8b', b'LONG'], [-1, b'\xe5\xbd\xb1\xe5\x83\x8f\xe9\x81\xa5\xe6\x84\x9f.\xe4\xb8\xad\xe5\x9b\xbd\xe8\xbf\x91\xe6\xb5\xb7HY1C-CZI\xe5\xbd\xb1\xe5\x83\x8f\xe6\x95\xb0\xe6\x8d\xae.\xe8\xa6\x86\xe7\x9b\x96\xe8\x8c\x83\xe5\x9b\xb4', b'LONG'], [-1, b'\xe5\xbd\xb1\xe5\x83\x8f\xe9\x81\xa5\xe6\x84\x9f.\xe4\xb8\xad\xe5\x9b\xbd\xe8\xbf\x91\xe6\xb5\xb7\xe6\xb5\xb7\xe5\x9f\x9fMODIS\xe5\x8e\x9f\xe5\xa7\x8b\xe5\xbd\xb1\xe5\x83\x8f\xe6\x95\xb0\xe6\x8d\xae.\xe5\x88\x86\xe8\xbe\xa8\xe7\x8e\x87', b'LONG'], [-1, b'\xe5\xbd\xb1\xe5\x83\x8f\xe9\x81\xa5\xe6\x84\x9f.\xe4\xb8\xad\xe5\x9b\xbd\xe8\xbf\x91\xe6\xb5\xb7\xe6\xb5\xb7\xe5\x9f\x9fMODIS\xe5\x8e\x9f\xe5\xa7\x8b\xe5\xbd\xb1\xe5\x83\x8f\xe6\x95\xb0\xe6\x8d\xae.\xe5\xbd\xb1\xe5\x83\x8f\xe7\xb1\xbb\xe5\x9e\x8b', b'LONG'], [-1, b'\xe5\xbd\xb1\xe5\x83\x8f\xe9\x81\xa5\xe6\x84\x9f.\xe4\xb8\xad\xe5\x9b\xbd\xe8\xbf\x91\xe6\xb5\xb7\xe6\xb5\xb7\xe5\x9f\x9fMODIS\xe5\x8e\x9f\xe5\xa7\x8b\xe5\xbd\xb1\xe5\x83\x8f\xe6\x95\xb0\xe6\x8d\xae.\xe8\xa6\x86\xe7\x9b\x96\xe8\x8c\x83\xe5\x9b\xb4', b'LONG'], [-1, b'\xe6\xb5\xb7\xe5\xba\x95\xe5\x9c\xb0\xe5\xbd\xa2.2020\xe5\x85\xa8\xe7\x90\x83\xe6\xb5\xb7\xe5\xba\x95\xe5\x9c\xb0\xe5\xbd\xa2\xe6\x95\xb0\xe6\x8d\xae.\xe5\x9c\xb0\xe5\xbd\xa2', b'LONG'], [-1, b'\xe6\xb5\xb7\xe5\xba\x95\xe5\x9c\xb0\xe5\xbd\xa2.2020\xe5\x85\xa8\xe7\x90\x83\xe6\xb5\xb7\xe5\xba\x95\xe5\x9c\xb0\xe5\xbd\xa2\xe6\x95\xb0\xe6\x8d\xae.\xe7\xba\xac\xe5\xba\xa6', b'LONG'], [-1, b'\xe6\xb5\xb7\xe5\xba\x95\xe5\x9c\xb0\xe5\xbd\xa2.2020\xe5\x85\xa8\xe7\x90\x83\xe6\xb5\xb7\xe5\xba\x95\xe5\x9c\xb0\xe5\xbd\xa2\xe6\x95\xb0\xe6\x8d\xae.\xe7\xbb\x8f\xe5\xba\xa6', b'LONG'], [-1, b'\xe6\xb5\xb7\xe6\xb4\x8b\xe5\x9c\xb0\xe7\x90\x83\xe7\x89\xa9\xe7\x90\x86.\xe6\xb5\xb7\xe6\xb4\x8b\xe7\xa3\x81\xe5\x8a\x9b\xe6\x95\xb0\xe6\x8d\xae.\xe5\xbc\xba\xe5\xba\xa6', b'LONG'], [-1, b'\xe6\xb5\xb7\xe6\xb4\x8b\xe5\x9c\xb0\xe7\x90\x83\xe7\x89\xa9\xe7\x90\x86.\xe6\xb5\xb7\xe6\xb4\x8b\xe7\xa3\x81\xe5\x8a\x9b\xe6\x95\xb0\xe6\x8d\xae.\xe7\xba\xac\xe5\xba\xa6', b'LONG'], [-1, b'\xe6\xb5\xb7\xe6\xb4\x8b\xe5\x9c\xb0\xe7\x90\x83\xe7\x89\xa9\xe7\x90\x86.\xe6\xb5\xb7\xe6\xb4\x8b\xe7\xa3\x81\xe5\x8a\x9b\xe6\x95\xb0\xe6\x8d\xae.\xe7\xbb\x8f\xe5\xba\xa6', b'LONG'], [-1, b'\xe6\xb5\xb7\xe6\xb4\x8b\xe5\x9c\xb0\xe7\x90\x83\xe7\x89\xa9\xe7\x90\x86.\xe6\xb5\xb7\xe6\xb4\x8b\xe9\x87\x8d\xe5\x8a\x9b\xe6\x95\xb0\xe6\x8d\xae.\xe7\xba\xac\xe5\xba\xa6', b'LONG'], [-1, b'\xe6\xb5\xb7\xe6\xb4\x8b\xe5\x9c\xb0\xe7\x90\x83\xe7\x89\xa9\xe7\x90\x86.\xe6\xb5\xb7\xe6\xb4\x8b\xe9\x87\x8d\xe5\x8a\x9b\xe6\x95\xb0\xe6\x8d\xae.\xe7\xbb\x8f\xe5\xba\xa6', b'LONG'], [-1, b'\xe6\xb5\xb7\xe6\xb4\x8b\xe5\x9c\xb0\xe7\x90\x83\xe7\x89\xa9\xe7\x90\x86.\xe6\xb5\xb7\xe6\xb4\x8b\xe9\x87\x8d\xe5\x8a\x9b\xe6\x95\xb0\xe6\x8d\xae.\xe9\x87\x8d\xe5\x8a\x9b\xe5\x8a\xa0\xe9\x80\x9f\xe5\xba\xa6', b'LONG'], [-1, b'\xe6\xb5\xb7\xe6\xb4\x8b\xe5\x9c\xb0\xe7\x90\x83\xe7\x89\xa9\xe7\x90\x86.\xe9\xa9\xac\xe9\x87\x8c\xe4\xba\x9a\xe7\xba\xb3\xe6\xb5\xb7\xe6\xb2\x9f\xe6\xb5\x85\xe5\x89\x96\xe6\x95\xb0\xe6\x8d\xae\xe9\x9b\x86.\xe5\x8e\x9a\xe5\xba\xa6', b'LONG'], [-1, b'\xe6\xb5\xb7\xe6\xb4\x8b\xe5\x9c\xb0\xe7\x90\x83\xe7\x89\xa9\xe7\x90\x86.\xe9\xa9\xac\xe9\x87\x8c\xe4\xba\x9a\xe7\xba\xb3\xe6\xb5\xb7\xe6\xb2\x9f\xe6\xb5\x85\xe5\x89\x96\xe6\x95\xb0\xe6\x8d\xae\xe9\x9b\x86.\xe6\xb7\xb1\xe5\xba\xa6', b'LONG'], [-1, b'\xe6\xb5\xb7\xe6\xb4\x8b\xe5\x9c\xb0\xe7\x90\x83\xe7\x89\xa9\xe7\x90\x86.\xe9\xa9\xac\xe9\x87\x8c\xe4\xba\x9a\xe7\xba\xb3\xe6\xb5\xb7\xe6\xb2\x9f\xe6\xb5\x85\xe5\x89\x96\xe6\x95\xb0\xe6\x8d\xae\xe9\x9b\x86.\xe7\x89\xa9\xe8\xb4\xa8\xe7\xbb\x84\xe6\x88\x90', b'LONG'], [-1, b'\xe6\xb5\xb7\xe6\xb4\x8b\xe5\x9c\xb0\xe7\x90\x83\xe7\x89\xa9\xe7\x90\x86.\xe9\xa9\xac\xe9\x87\x8c\xe4\xba\x9a\xe7\xba\xb3\xe6\xb5\xb7\xe6\xb2\x9f\xe6\xb5\x85\xe5\x89\x96\xe6\x95\xb0\xe6\x8d\xae\xe9\x9b\x86.\xe7\xba\xac\xe5\xba\xa6', b'LONG'], [-1, b'\xe6\xb5\xb7\xe6\xb4\x8b\xe5\x9c\xb0\xe7\x90\x83\xe7\x89\xa9\xe7\x90\x86.\xe9\xa9\xac\xe9\x87\x8c\xe4\xba\x9a\xe7\xba\xb3\xe6\xb5\xb7\xe6\xb2\x9f\xe6\xb5\x85\xe5\x89\x96\xe6\x95\xb0\xe6\x8d\xae\xe9\x9b\x86.\xe7\xbb\x8f\xe5\xba\xa6', b'LONG'], [-1, b'\xe6\xb5\xb7\xe6\xb4\x8b\xe5\xba\x95\xe8\xb4\xa8.\xe5\xa4\x9a\xe9\x87\x91\xe5\xb1\x9e\xe7\xbb\x93\xe6\xa0\xb8\xe4\xb8\xbb\xe9\x87\x8f\xe5\x85\x83\xe7\xb4\xa0\xe6\x95\xb0\xe6\x8d\xae.\xe5\x88\x86\xe5\xb8\x83', b'LONG'], [-1, b'\xe6\xb5\xb7\xe6\xb4\x8b\xe5\xba\x95\xe8\xb4\xa8.\xe5\xa4\x9a\xe9\x87\x91\xe5\xb1\x9e\xe7\xbb\x93\xe6\xa0\xb8\xe4\xb8\xbb\xe9\x87\x8f\xe5\x85\x83\xe7\xb4\xa0\xe6\x95\xb0\xe6\x8d\xae.\xe5\x90\xab\xe9\x87\x8f', b'LONG'], [-1, b'\xe6\xb5\xb7\xe6\xb4\x8b\xe5\xba\x95\xe8\xb4\xa8.\xe6\xb2\x89\xe7\xa7\xaf\xe7\x89\xa9\xe7\xb2\x92\xe5\xba\xa6\xe6\x95\xb0\xe6\x8d\xae.\xe5\x88\x86\xe5\xb8\x83', b'LONG'], [-1, b'\xe6\xb5\xb7\xe6\xb4\x8b\xe5\xba\x95\xe8\xb4\xa8.\xe6\xb2\x89\xe7\xa7\xaf\xe7\x89\xa9\xe7\xb2\x92\xe5\xba\xa6\xe6\x95\xb0\xe6\x8d\xae.\xe7\xb2\x92\xe5\xbe\x84', b'LONG'], [-1, b'\xe6\xb5\xb7\xe6\xb4\x8b\xe5\xba\x95\xe8\xb4\xa8.\xe7\xa2\xb3\xe5\x8d\x81\xe5\x9b\x9b\xe6\xb5\x8b\xe5\xb9\xb4\xe6\x95\xb0\xe6\x8d\xae.\xe5\x90\xab\xe9\x87\x8f', b'LONG'], [-1, b'\xe6\xb5\xb7\xe6\xb4\x8b\xe5\xba\x95\xe8\xb4\xa8.\xe7\xa2\xb3\xe5\x8d\x81\xe5\x9b\x9b\xe6\xb5\x8b\xe5\xb9\xb4\xe6\x95\xb0\xe6\x8d\xae.\xe5\xb9\xb4\xe4\xbb\xa3', b'LONG'], [-1, b'\xe6\xb5\xb7\xe6\xb4\x8b\xe6\xb0\x94\xe8\xb1\xa1.\xe5\x9b\xbd\xe9\x99\x85\xe6\xb5\xb7\xe6\xb4\x8b\xe5\xa4\xa7\xe6\xb0\x94\xe7\xbb\xbc\xe5\x90\x88\xe6\x95\xb0\xe6\x8d\xae\xe9\x9b\x86.\xe4\xbd\x8d\xe7\xbd\xae', b'LONG'], [-1, b'\xe6\xb5\xb7\xe6\xb4\x8b\xe6\xb0\x94\xe8\xb1\xa1.\xe5\x9b\xbd\xe9\x99\x85\xe6\xb5\xb7\xe6\xb4\x8b\xe5\xa4\xa7\xe6\xb0\x94\xe7\xbb\xbc\xe5\x90\x88\xe6\x95\xb0\xe6\x8d\xae\xe9\x9b\x86.\xe5\xa4\xa9\xe6\xb0\x94\xe7\x8e\xb0\xe8\xb1\xa1', b'LONG'], [-1, b'\xe6\xb5\xb7\xe6\xb4\x8b\xe6\xb0\x94\xe8\xb1\xa1.\xe5\x9b\xbd\xe9\x99\x85\xe6\xb5\xb7\xe6\xb4\x8b\xe5\xa4\xa7\xe6\xb0\x94\xe7\xbb\xbc\xe5\x90\x88\xe6\x95\xb0\xe6\x8d\xae\xe9\x9b\x86.\xe5\xb9\xb3\xe5\x8f\xb0\xe7\xb1\xbb\xe5\x9e\x8b', b'LONG'], [-1, b'\xe6\xb5\xb7\xe6\xb4\x8b\xe6\xb0\x94\xe8\xb1\xa1.\xe5\x9b\xbd\xe9\x99\x85\xe6\xb5\xb7\xe6\xb4\x8b\xe5\xa4\xa7\xe6\xb0\x94\xe7\xbb\xbc\xe5\x90\x88\xe6\x95\xb0\xe6\x8d\xae\xe9\x9b\x86.\xe6\x95\xb0\xe6\x8d\xae\xe6\x9d\xa5\xe6\xba\x90', b'LONG'], [-1, b'\xe6\xb5\xb7\xe6\xb4\x8b\xe6\xb0\x94\xe8\xb1\xa1.\xe5\x9b\xbd\xe9\x99\x85\xe6\xb5\xb7\xe6\xb4\x8b\xe5\xa4\xa7\xe6\xb0\x94\xe7\xbb\xbc\xe5\x90\x88\xe6\x95\xb0\xe6\x8d\xae\xe9\x9b\x86.\xe6\xb0\x94\xe6\xb8\xa9', b'LONG'], [-1, b'\xe6\xb5\xb7\xe6\xb4\x8b\xe6\xb0\x94\xe8\xb1\xa1.\xe5\x9b\xbd\xe9\x99\x85\xe6\xb5\xb7\xe6\xb4\x8b\xe5\xa4\xa7\xe6\xb0\x94\xe7\xbb\xbc\xe5\x90\x88\xe6\x95\xb0\xe6\x8d\xae\xe9\x9b\x86.\xe9\xa3\x8e', b'LONG'], [-1, b'\xe6\xb5\xb7\xe6\xb4\x8b\xe6\xb0\x94\xe8\xb1\xa1.\xe6\xb5\xb7\xe9\x9d\xa2\xe6\xb0\x94\xe8\xb1\xa1\xe7\xbb\xbc\xe5\x90\x88\xe6\x95\xb0\xe6\x8d\xae\xe9\x9b\x86.\xe4\xbd\x8d\xe7\xbd\xae', b'LONG'], [-1, b'\xe6\xb5\xb7\xe6\xb4\x8b\xe6\xb0\x94\xe8\xb1\xa1.\xe6\xb5\xb7\xe9\x9d\xa2\xe6\xb0\x94\xe8\xb1\xa1\xe7\xbb\xbc\xe5\x90\x88\xe6\x95\xb0\xe6\x8d\xae\xe9\x9b\x86.\xe5\xa4\xa9\xe6\xb0\x94\xe7\x8e\xb0\xe8\xb1\xa1', b'LONG'], [-1, b'\xe6\xb5\xb7\xe6\xb4\x8b\xe6\xb0\x94\xe8\xb1\xa1.\xe6\xb5\xb7\xe9\x9d\xa2\xe6\xb0\x94\xe8\xb1\xa1\xe7\xbb\xbc\xe5\x90\x88\xe6\x95\xb0\xe6\x8d\xae\xe9\x9b\x86.\xe5\xb9\xb3\xe5\x8f\xb0\xe7\xb1\xbb\xe5\x9e\x8b', b'LONG'], [-1, b'\xe6\xb5\xb7\xe6\xb4\x8b\xe6\xb0\x94\xe8\xb1\xa1.\xe6\xb5\xb7\xe9\x9d\xa2\xe6\xb0\x94\xe8\xb1\xa1\xe7\xbb\xbc\xe5\x90\x88\xe6\x95\xb0\xe6\x8d\xae\xe9\x9b\x86.\xe6\x95\xb0\xe6\x8d\xae\xe6\x9d\xa5\xe6\xba\x90', b'LONG'], [-1, b'\xe6\xb5\xb7\xe6\xb4\x8b\xe6\xb0\x94\xe8\xb1\xa1.\xe6\xb5\xb7\xe9\x9d\xa2\xe6\xb0\x94\xe8\xb1\xa1\xe7\xbb\xbc\xe5\x90\x88\xe6\x95\xb0\xe6\x8d\xae\xe9\x9b\x86.\xe6\xb0\x94\xe6\xb8\xa9', b'LONG'], [-1, b'\xe6\xb5\xb7\xe6\xb4\x8b\xe6\xb0\x94\xe8\xb1\xa1.\xe6\xb5\xb7\xe9\x9d\xa2\xe6\xb0\x94\xe8\xb1\xa1\xe7\xbb\xbc\xe5\x90\x88\xe6\x95\xb0\xe6\x8d\xae\xe9\x9b\x86.\xe9\xa3\x8e', b'LONG'], [-1, b'\xe6\xb5\xb7\xe6\xb4\x8b\xe6\xb0\x94\xe8\xb1\xa1.\xe6\xb8\x94\xe8\x88\xb9\xe8\xa7\x82\xe6\xb5\x8b\xe6\x95\xb0\xe6\x8d\xae\xe9\x9b\x86.\xe4\xbd\x8d\xe7\xbd\xae', b'LONG'], [-1, b'\xe6\xb5\xb7\xe6\xb4\x8b\xe6\xb0\x94\xe8\xb1\xa1.\xe6\xb8\x94\xe8\x88\xb9\xe8\xa7\x82\xe6\xb5\x8b\xe6\x95\xb0\xe6\x8d\xae\xe9\x9b\x86.\xe5\xa4\xa9\xe6\xb0\x94\xe7\x8e\xb0\xe8\xb1\xa1', b'LONG'], [-1, b'\xe6\xb5\xb7\xe6\xb4\x8b\xe6\xb0\x94\xe8\xb1\xa1.\xe6\xb8\x94\xe8\x88\xb9\xe8\xa7\x82\xe6\xb5\x8b\xe6\x95\xb0\xe6\x8d\xae\xe9\x9b\x86.\xe5\xb9\xb3\xe5\x8f\xb0\xe7\xb1\xbb\xe5\x9e\x8b', b'LONG'], [-1, b'\xe6\xb5\xb7\xe6\xb4\x8b\xe6\xb0\x94\xe8\xb1\xa1.\xe6\xb8\x94\xe8\x88\xb9\xe8\xa7\x82\xe6\xb5\x8b\xe6\x95\xb0\xe6\x8d\xae\xe9\x9b\x86.\xe6\x95\xb0\xe6\x8d\xae\xe6\x9d\xa5\xe6\xba\x90', b'LONG'], [-1, b'\xe6\xb5\xb7\xe6\xb4\x8b\xe6\xb0\x94\xe8\xb1\xa1.\xe6\xb8\x94\xe8\x88\xb9\xe8\xa7\x82\xe6\xb5\x8b\xe6\x95\xb0\xe6\x8d\xae\xe9\x9b\x86.\xe6\xb0\x94\xe6\xb8\xa9', b'LONG'], [-1, b'\xe6\xb5\xb7\xe6\xb4\x8b\xe6\xb0\x94\xe8\xb1\xa1.\xe6\xb8\x94\xe8\x88\xb9\xe8\xa7\x82\xe6\xb5\x8b\xe6\x95\xb0\xe6\x8d\xae\xe9\x9b\x86.\xe9\xa3\x8e', b'LONG'], [-1, b'\xe6\xb5\xb7\xe6\xb4\x8b\xe6\xb0\xb4\xe6\x96\x87.\xe4\xb8\xad\xe5\x9b\xbd\xe5\x8f\xb0\xe7\xab\x99\xe8\xa7\x82\xe6\xb5\x8b\xe6\x95\xb0\xe6\x8d\xae.\xe6\xb0\xb4\xe4\xbd\x8d', b'LONG'], [-1, b'\xe6\xb5\xb7\xe6\xb4\x8b\xe6\xb0\xb4\xe6\x96\x87.\xe4\xb8\xad\xe5\x9b\xbd\xe5\x8f\xb0\xe7\xab\x99\xe8\xa7\x82\xe6\xb5\x8b\xe6\x95\xb0\xe6\x8d\xae.\xe6\xb3\xa2\xe6\xb5\xaa', b'LONG'], [-1, b'\xe6\xb5\xb7\xe6\xb4\x8b\xe6\xb0\xb4\xe6\x96\x87.\xe4\xb8\xad\xe5\x9b\xbd\xe5\x8f\xb0\xe7\xab\x99\xe8\xa7\x82\xe6\xb5\x8b\xe6\x95\xb0\xe6\x8d\xae.\xe6\xb8\xa9\xe5\xba\xa6', b'LONG'], [-1, b'\xe6\xb5\xb7\xe6\xb4\x8b\xe6\xb0\xb4\xe6\x96\x87.\xe4\xb8\xad\xe5\x9b\xbd\xe5\x8f\xb0\xe7\xab\x99\xe8\xa7\x82\xe6\xb5\x8b\xe6\x95\xb0\xe6\x8d\xae.\xe7\x9b\x90\xe5\xba\xa6', b'LONG'], [-1, b'\xe6\xb5\xb7\xe6\xb4\x8b\xe6\xb0\xb4\xe6\x96\x87.\xe4\xb8\xad\xe5\x9b\xbd\xe6\x9c\x88\xe5\xb9\xb3\xe5\x9d\x87\xe6\xb0\xb4\xe4\xbd\x8d\xe5\xbb\xb6\xe6\x97\xb6\xe6\x95\xb0\xe6\x8d\xae.\xe6\xb0\xb4\xe4\xbd\x8d', b'LONG'], [-1, b'\xe6\xb5\xb7\xe6\xb4\x8b\xe6\xb0\xb4\xe6\x96\x87.\xe6\xb3\xa2\xe6\xb5\xaa\xe5\x92\x8c\xe9\xa3\x8e\xe5\x9c\xba\xe6\x95\xb0\xe6\x8d\xae.\xe6\xb3\xa2\xe6\xb5\xaa', b'LONG'], [-1, b'\xe6\xb5\xb7\xe6\xb4\x8b\xe6\xb0\xb4\xe6\x96\x87.\xe6\xb3\xa2\xe6\xb5\xaa\xe5\x92\x8c\xe9\xa3\x8e\xe5\x9c\xba\xe6\x95\xb0\xe6\x8d\xae.\xe9\xa3\x8e\xe5\x9c\xba', b'LONG'], [-1, b'\xe6\xb5\xb7\xe6\xb4\x8b\xe6\xb0\xb4\xe6\x96\x87.\xe6\xb5\xb7\xe8\xa1\xa8\xe9\x9d\xa2\xe5\x8e\x8b\xe5\xbc\xba.\xe5\x8e\x8b\xe5\xbc\xba', b'LONG'], [-1, b'\xe6\xb5\xb7\xe6\xb4\x8b\xe7\x94\x9f\xe7\x89\xa9.\xe6\x97\xa5\xe6\x9c\xac\xe4\xb8\x9c\xe9\x83\xa8\xe6\x97\xb6\xe5\xba\x8f\xe7\xab\x99\xe6\xb5\xb7\xe6\xb4\x8b\xe7\x94\x9f\xe7\x89\xa9\xe6\x95\xb0\xe6\x8d\xae\xe9\x9b\x86.\xe7\x94\x9f\xe7\x89\xa9\xe7\xb1\xbb\xe5\x9e\x8b', b'LONG'], [-1, b'\xe6\xb5\xb7\xe6\xb4\x8b\xe7\x94\x9f\xe7\x89\xa9.\xe6\xbe\xb3\xe5\xa4\xa7\xe5\x88\xa9\xe4\xba\x9a\xe6\xb5\xb7\xe6\xb4\x8b\xe8\xa7\x82\xe6\xb5\x8b\xe7\xbb\xbc\xe5\x90\x88\xe7\xb3\xbb\xe7\xbb\x9f\xe6\xb5\xb7\xe6\xb4\x8b\xe7\x94\x9f\xe7\x89\xa9\xe6\x95\xb0\xe6\x8d\xae\xe9\x9b\x86.\xe7\x94\x9f\xe7\x89\xa9\xe7\xb1\xbb\xe5\x9e\x8b', b'LONG'], [-1, b'\xe6\xb5\xb7\xe6\xb4\x8b\xe7\x94\x9f\xe7\x89\xa9.\xe7\xbe\x8e\xe5\x9b\xbd\xe5\x9b\xbd\xe5\xae\xb6\xe8\xbf\x91\xe5\xb2\xb8\xe6\xb5\xb7\xe6\xb4\x8b\xe7\xa7\x91\xe5\xad\xa6\xe4\xb8\xad\xe5\xbf\x83\xe6\xb5\xb7\xe6\xb4\x8b\xe7\x94\x9f\xe7\x89\xa9\xe6\x95\xb0\xe6\x8d\xae\xe9\x9b\x86.\xe7\x94\x9f\xe7\x89\xa9\xe7\xb1\xbb\xe5\x9e\x8b', b'LONG'], [-1, b'\xe7\x9f\xa2\xe9\x87\x8f\xe5\x9c\xb0\xe5\x9b\xbe\xe6\x95\xb0\xe6\x8d\xae.\xe5\x85\xac\xe8\xb7\xaf', b'LONG'], [-1, b'\xe7\x9f\xa2\xe9\x87\x8f\xe5\x9c\xb0\xe5\x9b\xbe\xe6\x95\xb0\xe6\x8d\xae.\xe5\xb1\x85\xe6\xb0\x91\xe5\x9c\xb0', b'LONG'], [-1, b'\xe7\x9f\xa2\xe9\x87\x8f\xe5\x9c\xb0\xe5\x9b\xbe\xe6\x95\xb0\xe6\x8d\xae.\xe6\xb0\xb4\xe7\xb3\xbb', b'LONG'], [-1, b'\xe7\x9f\xa2\xe9\x87\x8f\xe5\x9c\xb0\xe5\x9b\xbe\xe6\x95\xb0\xe6\x8d\xae.\xe9\x93\x81\xe8\xb7\xaf', b'LONG'], [-1, b'\xe7\xa7\x91\xe6\x8a\x80\xe5\x9f\xba\xe7\xa1\x80\xe8\xb5\x84\xe6\xba\x90\xe8\xb0\x83\xe6\x9f\xa5\xe4\xb8\x93\xe9\xa1\xb9.\xe7\xac\xac\xe4\xb8\x80\xe6\x89\xbf\xe5\xbb\xba\xe5\x8d\x95\xe4\xbd\x8d', b'LONG'], [-1, b'\xe7\xa7\x91\xe6\x8a\x80\xe5\x9f\xba\xe7\xa1\x80\xe8\xb5\x84\xe6\xba\x90\xe8\xb0\x83\xe6\x9f\xa5\xe4\xb8\x93\xe9\xa1\xb9.\xe9\xa1\xb9\xe7\x9b\xae\xe5\x90\x8d\xe7\xa7\xb0', b'LONG'], [-1, b'\xe7\xa7\x91\xe6\x8a\x80\xe5\x9f\xba\xe7\xa1\x80\xe8\xb5\x84\xe6\xba\x90\xe8\xb0\x83\xe6\x9f\xa5\xe4\xb8\x93\xe9\xa1\xb9.\xe9\xa1\xb9\xe7\x9b\xae\xe6\x9d\xa5\xe6\xba\x90', b'LONG'], [-1, b'\xe7\xa7\x91\xe6\x8a\x80\xe5\x9f\xba\xe7\xa1\x80\xe8\xb5\x84\xe6\xba\x90\xe8\xb0\x83\xe6\x9f\xa5\xe4\xb8\x93\xe9\xa1\xb9.\xe9\xa1\xb9\xe7\x9b\xae\xe7\xbc\x96\xe5\x8f\xb7', b'LONG'], [-1, b'\xe7\xa7\x91\xe6\x8a\x80\xe5\x9f\xba\xe7\xa1\x80\xe8\xb5\x84\xe6\xba\x90\xe8\xb0\x83\xe6\x9f\xa5\xe4\xb8\x93\xe9\xa1\xb9.\xe9\xa1\xb9\xe7\x9b\xae\xe9\xaa\x8c\xe6\x94\xb6\xe8\xaf\x81\xe6\x98\x8e', b'LONG'], [-1, b'\xe7\xbb\x9f\xe8\xae\xa1\xe5\x88\x86\xe6\x9e\x90\xe6\x95\xb0\xe6\x8d\xae.\xe6\xb5\xb7\xe6\xb4\x8b\xe6\xb0\x94\xe8\xb1\xa1\xe7\xbb\x9f\xe8\xae\xa1\xe5\x88\x86\xe6\x9e\x90\xe6\x95\xb0\xe6\x8d\xae.\xe5\x8f\x98\xe5\x8c\x96\xe8\xb6\x8b\xe5\x8a\xbf', b'LONG'], [-1, b'\xe7\xbb\x9f\xe8\xae\xa1\xe5\x88\x86\xe6\x9e\x90\xe6\x95\xb0\xe6\x8d\xae.\xe6\xb5\xb7\xe6\xb4\x8b\xe6\xb0\x94\xe8\xb1\xa1\xe7\xbb\x9f\xe8\xae\xa1\xe5\x88\x86\xe6\x9e\x90\xe6\x95\xb0\xe6\x8d\xae.\xe5\xb9\xb3\xe5\x9d\x87\xe5\x80\xbc', b'LONG'], [-1, b'\xe7\xbb\x9f\xe8\xae\xa1\xe5\x88\x86\xe6\x9e\x90\xe6\x95\xb0\xe6\x8d\xae.\xe6\xb5\xb7\xe6\xb4\x8b\xe6\xb8\xa9\xe5\xba\xa6\xe7\xbb\x9f\xe8\xae\xa1\xe6\x95\xb0\xe6\x8d\xae.\xe5\x8f\x98\xe5\x8c\x96\xe8\xb6\x8b\xe5\x8a\xbf', b'LONG'], [-1, b'\xe7\xbb\x9f\xe8\xae\xa1\xe5\x88\x86\xe6\x9e\x90\xe6\x95\xb0\xe6\x8d\xae.\xe6\xb5\xb7\xe6\xb4\x8b\xe6\xb8\xa9\xe5\xba\xa6\xe7\xbb\x9f\xe8\xae\xa1\xe6\x95\xb0\xe6\x8d\xae.\xe5\xb9\xb3\xe5\x9d\x87\xe5\x80\xbc', b'LONG'], [-1, b'\xe7\xbb\x9f\xe8\xae\xa1\xe5\x88\x86\xe6\x9e\x90\xe6\x95\xb0\xe6\x8d\xae.\xe6\xb5\xb7\xe6\xb4\x8b\xe7\x9b\x90\xe5\xba\xa6\xe7\xbb\x9f\xe8\xae\xa1\xe6\x95\xb0\xe6\x8d\xae.\xe5\x8f\x98\xe5\x8c\x96\xe8\xb6\x8b\xe5\x8a\xbf', b'LONG'], [-1, b'\xe7\xbb\x9f\xe8\xae\xa1\xe5\x88\x86\xe6\x9e\x90\xe6\x95\xb0\xe6\x8d\xae.\xe6\xb5\xb7\xe6\xb4\x8b\xe7\x9b\x90\xe5\xba\xa6\xe7\xbb\x9f\xe8\xae\xa1\xe6\x95\xb0\xe6\x8d\xae.\xe5\xb9\xb3\xe5\x9d\x87\xe5\x80\xbc', b'LONG'], [-1, b'\xe9\x87\x8d\xe7\x82\xb9\xe7\xa0\x94\xe5\x8f\x91\xe8\xae\xa1\xe5\x88\x92.\xe7\xac\xac\xe4\xb8\x80\xe6\x89\xbf\xe5\xbb\xba\xe5\x8d\x95\xe4\xbd\x8d', b'LONG'], [-1, b'\xe9\x87\x8d\xe7\x82\xb9\xe7\xa0\x94\xe5\x8f\x91\xe8\xae\xa1\xe5\x88\x92.\xe9\xa1\xb9\xe7\x9b\xae\xe5\x90\x8d\xe7\xa7\xb0', b'LONG'], [-1, b'\xe9\x87\x8d\xe7\x82\xb9\xe7\xa0\x94\xe5\x8f\x91\xe8\xae\xa1\xe5\x88\x92.\xe9\xa1\xb9\xe7\x9b\xae\xe6\x9d\xa5\xe6\xba\x90', b'LONG'], [-1, b'\xe9\x87\x8d\xe7\x82\xb9\xe7\xa0\x94\xe5\x8f\x91\xe8\xae\xa1\xe5\x88\x92.\xe9\xa1\xb9\xe7\x9b\xae\xe7\xbc\x96\xe5\x8f\xb7', b'LONG'], [-1, b'\xe9\x87\x8d\xe7\x82\xb9\xe7\xa0\x94\xe5\x8f\x91\xe8\xae\xa1\xe5\x88\x92.\xe9\xa1\xb9\xe7\x9b\xae\xe9\xaa\x8c\xe6\x94\xb6\xe8\xaf\x81\xe6\x98\x8e', b'LONG'], [-1, b'\xe9\xa3\x8e\xe7\x94\xb5\xe9\x81\xa5\xe6\x84\x9f\xe4\xba\xa7\xe5\x93\x81\xe6\x95\xb0\xe6\x8d\xae.\xe4\xbd\x8d\xe7\xbd\xae', b'LONG'], [-1, b'\xe9\xa3\x8e\xe7\x94\xb5\xe9\x81\xa5\xe6\x84\x9f\xe4\xba\xa7\xe5\x93\x81\xe6\x95\xb0\xe6\x8d\xae.\xe5\x8f\x91\xe7\x94\xb5\xe9\x87\x8f', b'LONG'], [-1, b'\xe9\xa3\x8e\xe7\x94\xb5\xe9\x81\xa5\xe6\x84\x9f\xe4\xba\xa7\xe5\x93\x81\xe6\x95\xb0\xe6\x8d\xae.\xe6\xb6\xa1\xe8\xbd\xae\xe6\x9c\xba\xe5\x9e\x8b\xe5\x8f\xb7', b'LONG'], [-1, b'\xe9\xa3\x8e\xe7\x94\xb5\xe9\x81\xa5\xe6\x84\x9f\xe4\xba\xa7\xe5\x93\x81\xe6\x95\xb0\xe6\x8d\xae.\xe6\xb6\xa1\xe8\xbd\xae\xe6\x9c\xba\xe6\x95\xb0\xe9\x87\x8f', b'LONG'], [-1, b'\xe9\xa3\x8e\xe7\x94\xb5\xe9\x81\xa5\xe6\x84\x9f\xe4\xba\xa7\xe5\x93\x81\xe6\x95\xb0\xe6\x8d\xae.\xe9\xa3\x8e\xe9\x80\x9f', b'LONG']]
# # 执行
# udf = UDFKMeansMerge()
# result = udf.transform(data, None, None)
# for row in result:
#     decoded_row = [col.decode('utf-8') if isinstance(col, bytes) else col for col in row]
#     print(decoded_row)
